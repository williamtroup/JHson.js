{"version":3,"sources":["../src/ts/enum.ts","../src/ts/is.ts","../src/ts/data.ts","../src/ts/dom.ts","../src/jhson.ts"],"names":["Is","Data","String","result","DomElement"],"mappings":"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","sourcesContent":["/**\n * JHson.js\n * \n * A JavaScript library for converting between HTML and JSON, with binding, templating, attributes, and CSS support.\n * \n * @file        enum.js\n * @version     v2.0.0\n * @author      Bunoon\n * @license     MIT License\n * @copyright   Bunoon 2024\n */\n\n\nexport const enum Char {\n    empty = \"\",\n    space = \" \",\n    newLine = \"\\n\",\n    variableStart = \"{{\",\n    variableEnd = \"}}\",\n    variableDefault = \"|\",\n    dash = \"-\",\n}\n\nexport const enum Value {\n    notFound = -1,\n}\n\nexport const enum JsonValue {\n    text = \"#text\",\n    cssStyle = \"$\",\n    attribute = \"@\",\n    children = \"&children\",\n}","/**\n * JHson.js\n * \n * A JavaScript library for converting between HTML and JSON, with binding, templating, attributes, and CSS support.\n * \n * @file        is.js\n * @version     v2.0.0\n * @author      Bunoon\n * @license     MIT License\n * @copyright   Bunoon 2024\n */\n\n\nimport { Char } from \"./enum\";\n\n\nexport namespace Is {\n    export function defined( value: any ) : boolean {\n        return value !== null && value !== undefined && value.toString() !== Char.empty;\n    }\n\n    export function definedObject( object: any ) : boolean {\n        return defined( object ) && typeof object === \"object\";\n    }\n\n    export function definedBoolean( object: any ) : boolean {\n        return defined( object ) && typeof object === \"boolean\";\n    }\n\n    export function definedString( object: any ) : boolean {\n        return defined( object ) && typeof object === \"string\";\n    }\n\n    export function definedFunction( object: any ) : boolean {\n        return defined( object ) && typeof object === \"function\";\n    }\n\n    export function definedNumber( object: any ) : boolean {\n        return defined( object ) && typeof object === \"number\";\n    }\n\n    export function definedArray( object: any ) : boolean {\n        return definedObject( object ) && object instanceof Array;\n    }\n}","/**\n * JHson.js\n * \n * A JavaScript library for converting between HTML and JSON, with binding, templating, attributes, and CSS support.\n * \n * @file        data.js\n * @version     v2.0.0\n * @author      Bunoon\n * @license     MIT License\n * @copyright   Bunoon 2024\n */\n\n\nimport { Char, Value } from \"./enum\";\nimport { Is } from \"./is\";\n\n\nexport namespace Data {\n    export namespace String {\n        export function newGuid() : string {\n            const result: string[] = [];\n    \n            for ( let charIndex: number = 0; charIndex < 32; charIndex++ ) {\n                if ( charIndex === 8 || charIndex === 12 || charIndex === 16 || charIndex === 20 ) {\n                    result.push( Char.dash );\n                }\n    \n                const character: string = Math.floor( Math.random() * 16 ).toString( 16 );\n                result.push( character );\n            }\n    \n            return result.join( Char.empty );\n        }\n    \n        export function startsWithAnyCase( data: string, start: string ) : boolean {\n            return data.substring( 0, start.length ).toLowerCase() === start.toLowerCase();\n        }\n\n        export function replaceAll( string: string, find: string, replace: string ) : string {\n            return string.replace( new RegExp( find.replace( Char.variableDefault, `[${Char.variableDefault}]` ), \"g\" ), replace );\n        }\n\n        export function getTemplateVariables( data: string ) : string[] {\n            const result: string[] = [];\n    \n            if ( Is.definedString( data ) ) {\n                let startIndex: number = 0;\n                let endIndex: number = 0;\n    \n                while ( startIndex > Value.notFound ) {\n                    startIndex = data.indexOf( Char.variableStart, endIndex );\n    \n                    if ( startIndex > Value.notFound ) {\n                        endIndex = data.indexOf( Char.variableEnd, startIndex );\n    \n                        if ( endIndex > Value.notFound ) {\n                            const variable: string = data.substring( startIndex, endIndex + Char.variableEnd.length );\n    \n                            result.push( variable );\n    \n                            endIndex += 2;\n                        }\n                    }\n                }\n            }\n    \n            return result;\n        }\n    }\n\n    export function getDefaultAnyString( value: any, defaultValue: string ) : string {\n        return typeof value === \"string\" ? value : defaultValue;\n    }\n\n    export function getDefaultString( value: any, defaultValue: string ) : string {\n        return Is.definedString( value ) ? value : defaultValue;\n    }\n\n    export function getDefaultBoolean( value: any, defaultValue: boolean ) : boolean {\n        return Is.definedBoolean( value ) ? value : defaultValue;\n    }\n\n    export function getDefaultNumber( value: any, defaultValue: number ) : number {\n        return Is.definedNumber( value ) ? value : defaultValue;\n    }\n\n    export function getDefaultFunction( value: any, defaultValue: object ) : any {\n        return Is.definedFunction( value ) ? value : defaultValue;\n    }\n\n    export function getDefaultArray( value: any, defaultValue: any[] ) : any[] {\n        return Is.definedArray( value ) ? value : defaultValue;\n    }\n\n    export function getDefaultObject( value: any, defaultValue: object ) : any {\n        return Is.definedObject( value ) ? value : defaultValue;\n    }\n\n    export function getDefaultStringOrArray( value: any, defaultValue: string[] ) : string[] {\n        let result: string[] = defaultValue;\n\n        if ( Is.definedString( value ) ) {\n            const values: string[] = value.toString().split( Char.space );\n\n            if ( values.length === 0 ) {\n                value = defaultValue;\n            } else {\n                result = values;\n            }\n\n        } else {\n            result = getDefaultArray( value, defaultValue );\n        }\n\n        return result;\n    }\n}","/**\n * JHson.js\n * \n * A JavaScript library for converting between HTML and JSON, with binding, templating, attributes, and CSS support.\n * \n * @file        dom.js\n * @version     v2.0.0\n * @author      Bunoon\n * @license     MIT License\n * @copyright   Bunoon 2024\n */\n\n\nimport { Char } from \"./enum\";\n\n\nexport namespace DomElement {\n    export function create( container: HTMLElement, type: string ) : HTMLElement {\n        const nodeType: string = type.toLowerCase();\n        const isText: boolean = nodeType === \"text\";\n\n        let result: any = isText ? document.createTextNode( Char.empty ) : document.createElement( nodeType );\n\n        container.appendChild( result );\n\n        return result;\n    }\n}","/**\n * JHson.js\n * \n * A JavaScript library for converting between HTML and JSON, with binding, templating, attributes, and CSS support.\n * \n * @file        jhson.ts\n * @version     v2.0.0\n * @author      Bunoon\n * @license     MIT License\n * @copyright   Bunoon 2024\n */\n\n\nimport { PublicApi, PublicApiHtml, PublicApiJson } from \"./ts/api\";\nimport { Constants } from \"./ts/constant\"\nimport { Data } from \"./ts/data\";\nimport { DomElement } from \"./ts/dom\";\nimport { Char, JsonValue, Value } from \"./ts/enum\";\nimport { Is } from \"./ts/is\";\nimport { type Configuration } from \"./ts/type\";\n\n\ntype StringToJson = {\n    parsed: boolean;\n    object: any;\n};\n\ntype WritingScope = {\n    css: Record<string, string[]>,\n    templateDataKeys: string[],\n    templateDataKeysLength: number,\n    templateDataKeysProcessed: string[]\n};\n\ntype HtmlProperties = {\n    json: string;\n    templateData: Record<string, string>;\n    removeOriginalAttributes: boolean;\n    clearOriginalHTML: boolean;\n    addCssToHead: boolean;\n    clearCssFromHead: boolean;\n    logTemplateDataWarnings: boolean;\n    addAttributes: boolean;\n    addCssProperties: boolean;\n    addText: boolean;\n    addChildren: boolean;\n};\n\ntype JsonProperties = {\n    includeAttributes: boolean,\n    includeCssProperties: boolean,\n    includeText: boolean,\n    includeChildren: boolean,\n    friendlyFormat: boolean,\n    indentSpaces: number,\n    ignoreNodeTypes: string[],\n    ignoreCssProperties: string[],\n    ignoreAttributes: string[],\n    generateUniqueMissingIds: boolean\n};\n\ntype ElementObject = {\n    nodeName: string;\n    nodeValues: any;\n}\n\n\n( () => {\n    // Variables: Configuration\n    let _configuration: Configuration = {} as Configuration;\n    \n    \n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * JSON - Get\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function getDefaultJsonProperties() : JsonProperties {\n        return {\n            includeAttributes: true,\n            includeCssProperties: false,\n            includeText: true,\n            includeChildren: true,\n            friendlyFormat: true,\n            indentSpaces: 2,\n            ignoreNodeTypes: [],\n            ignoreCssProperties: [],\n            ignoreAttributes: [],\n            generateUniqueMissingIds: false\n        } as JsonProperties;\n    }\n\n    function getJSON( element: HTMLElement, properties: JsonProperties ) : string {\n        let result: string = Char.empty;\n\n        if ( Is.definedObject( element ) ) {\n            const resultJson: any = {};\n            const elementJson: ElementObject = getElementObject( element, properties, {} );\n\n            resultJson[ elementJson.nodeName ] = elementJson.nodeValues;\n\n            if ( properties.friendlyFormat ) {\n                result = JSON.stringify( resultJson, null, properties.indentSpaces );\n            } else {\n                result = JSON.stringify( resultJson );\n            }\n        }\n        \n        return result;\n    }\n\n    function getElementObject( element: HTMLElement, properties: JsonProperties, parentCssStyles: Record<string, string> ) : ElementObject {\n        const result: any = {};\n        const childrenLength: number = element.children.length;\n        let childrenAdded: number = 0;\n\n        if ( properties.includeAttributes ) {\n            getElementAttributes( element, result, properties );\n        }\n\n        if ( properties.includeCssProperties ) {\n            getElementCssProperties( element, result, properties, parentCssStyles );\n        }\n\n        if ( properties.includeChildren && childrenLength > 0 ) {\n            childrenAdded = getElementChildren( element, result, childrenLength, properties, parentCssStyles );\n        }\n\n        if ( properties.includeText ) {\n            getElementText( element, result, childrenAdded );\n        }\n\n        if ( Is.defined( result[ JsonValue.children ] ) && result[ JsonValue.children ].length === 0 ) {\n            delete result[ JsonValue.children ];\n        }\n\n        return {\n            nodeName: element.nodeName.toLowerCase(),\n            nodeValues: result\n        } as ElementObject;\n    }\n\n    function getElementAttributes( element: HTMLElement, result: any, properties: JsonProperties ) : void {\n        var attributesLength = element.attributes.length,\n            attributesAvailable = [];\n\n        if ( properties.includeText && element.nodeName.toLowerCase() === \"textarea\" ) {\n            const textArea: HTMLTextAreaElement = element as HTMLTextAreaElement;\n\n            if ( Is.defined( textArea.value ) ) {\n                result[ JsonValue.text ] = textArea.value;\n            }\n        }\n\n        for ( let attributeIndex: number = 0; attributeIndex < attributesLength; attributeIndex++ ) {\n            const attribute: Attr = element.attributes[ attributeIndex ];\n\n            if ( Is.definedString( attribute.nodeName ) && properties.ignoreAttributes.indexOf( attribute.nodeName ) === Value.notFound ) {\n                result[ JsonValue.attribute + attribute.nodeName ] = attribute.nodeValue;\n                attributesAvailable.push( attribute.nodeName );\n            }\n        }\n\n        if ( properties.generateUniqueMissingIds && attributesAvailable.indexOf( \"id\" ) === Value.notFound && properties.ignoreAttributes.indexOf( \"id\" ) === Value.notFound) {\n            result[ JsonValue.attribute + \"id\" ] = Data.String.newGuid();\n        }\n    }\n\n    function getElementCssProperties( element: HTMLElement, result: any, properties: JsonProperties, parentCssStyles: Record<string, string> ) : void {\n        const computedStyles: CSSStyleDeclaration = getComputedStyle( element );\n        const computedStylesLength: number = computedStyles.length;\n\n        for ( let cssComputedStyleIndex: number = 0; cssComputedStyleIndex < computedStylesLength; cssComputedStyleIndex++ ) {\n            const cssComputedStyleName: string = computedStyles[ cssComputedStyleIndex ];\n\n            if ( properties.ignoreCssProperties.indexOf( cssComputedStyleName ) === Value.notFound ) {\n                const cssComputedStyleNameStorage: string = JsonValue.cssStyle + cssComputedStyleName;\n                const cssComputedValue: string = computedStyles.getPropertyValue( cssComputedStyleName );\n\n                if ( !parentCssStyles.hasOwnProperty( cssComputedStyleNameStorage ) || parentCssStyles[ cssComputedStyleNameStorage ] !== cssComputedValue ) {\n                    result[ cssComputedStyleNameStorage ] = cssComputedValue;\n                    parentCssStyles[ cssComputedStyleNameStorage ] = result[ cssComputedStyleNameStorage ];\n                }\n            }\n        }\n    }\n\n    function getElementChildren( element: HTMLElement, result: any, childrenLength: number, properties: JsonProperties, parentCssStyles: Record<string, string> ) : number {\n        let totalChildren: number = 0;\n        \n        result[ JsonValue.children ] = [];\n\n        for ( var childrenIndex = 0; childrenIndex < childrenLength; childrenIndex++ ) {\n            const child: HTMLElement = element.children[ childrenIndex ] as HTMLElement;\n            const childElementData: ElementObject = getElementObject( child, properties, getParentCssStylesCopy( parentCssStyles ) );\n            let addChild: boolean = false;\n\n            if ( _configuration.formattingNodeTypes.indexOf( childElementData.nodeName ) > Value.notFound ) {\n                totalChildren++;\n            } else {\n\n                if ( properties.ignoreNodeTypes.indexOf( childElementData.nodeName ) === Value.notFound ) {\n                    addChild = true;\n                    totalChildren++;\n                }\n            }\n\n            if ( addChild ) {\n                const childJson: Record<string, string> = {} as Record<string, string>;\n                childJson[ childElementData.nodeName ] = childElementData.nodeValues;\n\n                result[ JsonValue.children ].push( childJson );\n            }\n        }\n\n        return totalChildren;\n    }\n\n    function getElementText( element: HTMLElement, result: any, childrenAdded: number ) : void {\n        if ( Is.definedString( element.innerText ) ) {\n            if ( childrenAdded > 0 && Is.defined( result[ JsonValue.children ] ) && result[ JsonValue.children ].length === 0 ) {\n                result[ JsonValue.text ] = element.innerHTML;\n            } else {\n    \n                if ( element.innerText.trim() === element.innerHTML.trim() ) {\n                    result[ JsonValue.text ] = element.innerText;\n                }\n            }\n        }\n    }\n\n    function getParentCssStylesCopy( parentCssStyles: Record<string, string> ) : Record<string, string> {\n        const copy: Record<string, string> = {};\n\n        for ( let cssStyleName in parentCssStyles ) {\n            if ( parentCssStyles.hasOwnProperty( cssStyleName ) ) {\n                copy[ cssStyleName ] = parentCssStyles[ cssStyleName ];\n            }\n        }\n\n        return copy;\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * JSON - Write HTML\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function getDefaultHtmlProperties() : HtmlProperties {\n        return {\n            json: Char.empty,\n            templateData: {},\n            removeOriginalAttributes: true,\n            clearOriginalHTML: true,\n            addCssToHead: false,\n            clearCssFromHead: false,\n            logTemplateDataWarnings: false,\n            addAttributes: true,\n            addCssProperties: true,\n            addText: true,\n            addChildren: true\n        } as HtmlProperties;\n    }\n\n    function writeHtml( element: HTMLElement, properties: HtmlProperties ) : PublicApi {\n        if ( Is.definedObject( element ) && Is.definedString( properties.json ) ) {\n            const convertedJsonObject: StringToJson = getObjectFromString( properties.json );\n            const writingScope: WritingScope = {\n                css: {},\n                templateDataKeys: [],\n                templateDataKeysLength: 0,\n                templateDataKeysProcessed: []\n            } as WritingScope;\n\n            if ( convertedJsonObject.parsed && Is.definedObject( convertedJsonObject.object ) ) {\n                if ( properties.clearCssFromHead ) {\n                    clearCssStyleTagsFromHead();\n                }\n    \n                if ( Is.definedObject( properties.templateData ) ) {\n                    setupWritingScopeTemplateDataKeys( properties, writingScope );\n                }\n\n                for ( let key in convertedJsonObject.object ) {\n                    if ( key === element.nodeName.toLowerCase() ) {\n                        if ( properties.removeOriginalAttributes ) {\n                            while ( element.attributes.length > 0 ) {\n                                element.removeAttribute( element.attributes[ 0 ].name );\n                            }\n                        }\n\n                        if ( properties.clearOriginalHTML ) {\n                            element.innerHTML = Char.empty;\n                        }\n\n                        writeNode( element, convertedJsonObject.object[ key ], properties, writingScope );\n                    }\n                }\n\n                processRemainingVariablesForDefaults( element );\n\n                if ( properties.addCssToHead ) {\n                    writeCssStyleTag( writingScope );\n                }\n    \n                if ( properties.logTemplateDataWarnings ) {\n                    checkedForUnusedTemplateData( writingScope );\n                }\n            }\n        }\n\n        return _public;\n    }\n\n    function setupWritingScopeTemplateDataKeys( properties: HtmlProperties, writingScope: WritingScope ) : void {\n        for ( let templateDataKey in properties.templateData ) {\n            if ( properties.templateData.hasOwnProperty( templateDataKey ) ) {\n                writingScope.templateDataKeys.push( templateDataKey );\n            }\n        }\n\n        writingScope.templateDataKeys = writingScope.templateDataKeys.sort( function( a, b ) {\n            return b.length - a.length;\n        } );\n\n        writingScope.templateDataKeysLength = writingScope.templateDataKeys.length;\n    }\n\n    function writeNode( element: HTMLElement, jsonObject: any, properties: HtmlProperties, writingScope: WritingScope ) : void {\n        const cssStyles: string[] = [];\n\n        for ( var jsonKey in jsonObject ) {\n            if ( Data.String.startsWithAnyCase( jsonKey, JsonValue.attribute ) ) {\n                if ( properties.addAttributes ) {\n                    const attributeName: string = jsonKey.replace( JsonValue.attribute, Char.empty );\n                    const attributeValue: string = jsonObject[ jsonKey ];\n\n                    element.setAttribute( attributeName, attributeValue );\n                }\n\n            } else if ( Data.String.startsWithAnyCase( jsonKey, JsonValue.cssStyle ) ) {\n                if ( properties.addCssProperties ) {\n                    const cssStyleName: string = jsonKey.replace( JsonValue.cssStyle, Char.empty );\n\n                    if ( !properties.addCssToHead ) {\n                        element.style.setProperty( cssStyleName, jsonObject[ jsonKey ] );\n                    } else {\n                        cssStyles.push( cssStyleName + \":\" + jsonObject[ jsonKey ] + \";\" );\n                    }\n                }\n\n            } else if ( jsonKey === JsonValue.text ) {\n                if ( properties.addText ) {\n                    writeElementTextAndTemplateData( element, jsonObject[ jsonKey ], properties, writingScope );\n                }\n\n            } else if ( jsonKey === JsonValue.children ) {\n                if ( properties.addChildren ) {\n                    const childrenLength: number = jsonObject[ jsonKey ].length;\n\n                    for ( let childrenIndex: number = 0; childrenIndex < childrenLength; childrenIndex++ ) {\n                        const childJson: any = jsonObject[ jsonKey ][ childrenIndex ];\n    \n                        for ( var childJsonKey in childJson ) {\n                            if ( childJson.hasOwnProperty( childJsonKey ) ) {\n                                const childElement: HTMLElement = DomElement.create( element, childJsonKey.toLowerCase() );\n    \n                                writeNode( childElement, childJson[ childJsonKey ], properties, writingScope );\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if ( cssStyles.length > 0 ) {\n            storeCssStyles( element, cssStyles, writingScope );\n        } \n    }\n\n    function writeElementTextAndTemplateData( element: HTMLElement, value: string, properties: HtmlProperties, writingScope: WritingScope ) : void {\n        element.innerHTML = value;\n\n        if ( writingScope.templateDataKeysLength > 0 ) {\n            for ( let templateDataKeyIndex: number = 0; templateDataKeyIndex <  writingScope.templateDataKeysLength; templateDataKeyIndex++ ) {\n                let templateDataKey: string = writingScope.templateDataKeys[ templateDataKeyIndex ];\n\n                if ( properties.templateData.hasOwnProperty( templateDataKey ) ) {\n                    const templateDataKeyReplacement: string = properties.templateData[ templateDataKey ];\n\n                    if ( element.innerHTML.indexOf( templateDataKey ) > Value.notFound ) {\n                        element.innerHTML = Data.String.replaceAll( element.innerHTML, templateDataKey, templateDataKeyReplacement );\n\n                        if ( writingScope.templateDataKeysProcessed.indexOf( templateDataKey ) === Value.notFound ) {\n                            writingScope.templateDataKeysProcessed.push( templateDataKey );\n                        }\n\n                    } else {\n                        templateDataKey = templateDataKey.replace( Char.variableEnd, Char.empty ) + Char.space + Char.variableDefault;\n\n                        const startIndex: number = element.innerHTML.indexOf( templateDataKey );\n\n                        if ( startIndex > Value.notFound ) {\n                            const endIndex: number = element.innerHTML.indexOf( Char.variableEnd, startIndex );\n\n                            if ( endIndex > Value.notFound ) {\n                                \n                                const variable: string = element.innerHTML.substring( startIndex, endIndex + Char.variableEnd.length );\n                                \n                                element.innerHTML = Data.String.replaceAll( element.innerHTML, variable, templateDataKeyReplacement );\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    function storeCssStyles( element: HTMLElement, cssStyles: string[], writingScope: WritingScope ) : void {\n        let identifier: string = null!;\n\n        if ( Is.definedString( element.className ) ) {\n            const classNameParts: string[] = element.className.split( Char.space );\n\n            identifier = element.nodeName.toLowerCase() + \".\" + classNameParts[ 0 ] + \" {\";\n        } else {\n\n            if ( !Is.definedString( element.id ) ) {\n                element.id = Data.String.newGuid();\n            }\n\n            identifier = \"#\" + element.id + \" {\";\n        }\n\n        let cssLines: string[] = [];\n        cssLines.push( identifier );\n        cssLines = cssLines.concat( cssStyles );\n        cssLines.push( \"}\" );\n\n        writingScope.css[ element.id ] = cssLines;\n    }\n\n    function writeCssStyleTag( writingScope: WritingScope ) : void {\n        const head: HTMLElement = document.getElementsByTagName( \"head\" )[ 0 ];\n        let cssLines: string[] = [];\n\n        for ( let elementId in writingScope.css ) {\n            if ( writingScope.css.hasOwnProperty( elementId ) ) {\n                cssLines = cssLines.concat( writingScope.css[ elementId ] );\n            }\n        }\n\n        const style: HTMLStyleElement = DomElement.create( head, \"style\" ) as HTMLStyleElement;\n        style.appendChild( document.createTextNode( cssLines.join( Char.newLine ) ) );\n    }\n\n    function clearCssStyleTagsFromHead() : void {\n        const styles: HTMLElement[] = [].slice.call( document.getElementsByTagName( \"styles\" ) );\n        const stylesLength: number = styles.length;\n\n        for ( let styleIndex: number = 0; styleIndex < stylesLength; styleIndex++ ) {\n            styles[ styleIndex ].parentNode!.removeChild( styles[ styleIndex ] );\n        }\n    }\n\n    function checkedForUnusedTemplateData( writingScope: WritingScope ) : void {\n        const templateDataKeysProcessedLength: number = writingScope.templateDataKeysProcessed.length;\n\n        if ( writingScope.templateDataKeysLength > templateDataKeysProcessedLength ) {\n            for ( let templateDataKeyIndex: number = 0; templateDataKeyIndex < writingScope.templateDataKeysLength; templateDataKeyIndex++ ) {\n                const templateDataKey: string = writingScope.templateDataKeys[ templateDataKeyIndex ];\n\n                if ( writingScope.templateDataKeysProcessed.indexOf( templateDataKey ) === Value.notFound ) {\n                    console.warn( _configuration.text!.variableWarningText!.replace( \"{{variable_name}}\", templateDataKey ) );\n                }\n            }\n        }\n    }\n\n    function processRemainingVariablesForDefaults( element: HTMLElement ) : void {\n        const remainingVariables: string[] = Data.String.getTemplateVariables( element.innerHTML );\n        const remainingVariablesLength: number = remainingVariables.length;\n        \n        for ( let remainingVariableIndex: number = 0; remainingVariableIndex < remainingVariablesLength; remainingVariableIndex++ ) {\n            const variable: string = remainingVariables[ remainingVariableIndex ];\n\n            if ( variable.indexOf( Char.variableDefault ) > Value.notFound ) {\n                const defaultValue: string = variable\n                    .replace( Char.variableStart, Char.empty )\n                    .replace( Char.variableEnd, Char.empty )\n                    .split( Char.variableDefault )[ 1 ];\n\n                if ( Is.definedString( defaultValue ) ) {\n                    element.innerHTML = element.innerHTML.replace( variable, defaultValue.trim() );\n                }\n            }\n        }\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Triggering Custom Events\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function fireCustomTriggerEvent( triggerFunction: Function, ...args : any[] ) : void {\n        if ( Is.definedFunction( triggerFunction ) ) {\n            triggerFunction.apply( null, [].slice.call( args, 0 ) );\n        }\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Default Parameter/Option Handling\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function getObjectFromString( objectString: any ) : StringToJson {\n        const result: StringToJson = {\n            parsed: true,\n            object: null\n        } as StringToJson;\n\n        try {\n            if ( Is.definedString( objectString ) ) {\n                result.object = JSON.parse( objectString );\n            }\n\n        } catch ( e1: any ) {\n            try {\n                result.object = eval( `(${objectString})` );\n\n                if ( Is.definedFunction( result.object ) ) {\n                    result.object = result.object();\n                }\n                \n            } catch ( e2: any ) {\n                if ( !_configuration.safeMode ) {\n                    console.error( _configuration.text!.objectErrorText!.replace( \"{{error_1}}\",  e1.message ).replace( \"{{error_2}}\",  e2.message ) );\n                    result.parsed = false;\n                }\n                \n                result.object = null;\n            }\n        }\n\n        return result;\n    }\n\n\n\t/*\n\t * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t * Public API Functions:\n\t * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t */\n\n    const _public: PublicApi = {\n        /*\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         * Public API Functions:  JSON\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         */\n\n        json: function () : PublicApiJson {\n            const scope: PublicApiJson = {\n                includeAttributes: function ( flag: boolean ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                includeCssProperties: function ( flag: boolean ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                includeText: function ( flag: boolean ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                includeChildren: function ( flag: boolean ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                friendlyFormat: function ( flag: boolean ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                indentSpaces: function ( spaces: number ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                ignoreNodeTypes: function ( types: string[] | string ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                ignoreCssProperties: function ( cssProperties: string[] | string ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                ignoreAttributes: function ( attributes: string[] | string ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                generateUniqueMissingIds: function ( flag: boolean ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                get: function ( element: HTMLElement ) : string {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                getVariables: function ( json: string ) : string[] {\n                    throw new Error(\"Function not implemented.\");\n                }\n            };\n\n            return scope;\n        },\n\n\n        /*\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         * Public API Functions:  HTML\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         */\n\n        html: function () : PublicApiHtml {\n            const scope: PublicApiHtml = {\n                json: function ( json: string ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                templateData: function ( templateData: Record<string, string> ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                removeOriginalAttributes: function ( flag: boolean ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                clearOriginalHTML: function ( flag: boolean ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                addCssToHead: function ( flag: boolean ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                clearCssFromHead: function ( flag: boolean ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                logTemplateDataWarnings: function ( flag: boolean ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                addAttributes: function ( flag: boolean ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                addCssProperties: function ( flag: boolean ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                addText: function ( flag: boolean ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                addChildren: function ( flag: boolean ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                write: function ( element: HTMLElement ) : PublicApi {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                getVariables: function ( element: HTMLElement ) : string[] {\n                    throw new Error(\"Function not implemented.\");\n                }\n            };\n\n            return scope;\n        },\n\n\n        /*\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         * Public API Functions:  Configuration\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         */\n\n        setConfiguration: function ( newConfiguration: any ): PublicApi {\n            throw new Error(\"Function not implemented.\");\n        },\n\n\n        /*\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         * Public API Functions:  Additional Data\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         */\n\n        getVersion: function (): string {\n            throw new Error(\"Function not implemented.\");\n        }\n    };\n\n    \n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Initialize JHson.js\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    ( () => {\n    \n    } )();\n} )();"]}