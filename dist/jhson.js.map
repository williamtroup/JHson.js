{"version":3,"sources":["../src/ts/is.ts","../src/jhson.ts"],"names":["Is"],"mappings":"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","sourcesContent":["/**\n * JHson.js\n * \n * A JavaScript library for converting between HTML and JSON, with binding, templating, attributes, and CSS support.\n * \n * @file        is.js\n * @version     v2.0.0\n * @author      Bunoon\n * @license     MIT License\n * @copyright   Bunoon 2024\n */\n\n\nimport { Char } from \"./enum\";\n\n\nexport namespace Is {\n    export function defined( value: any ) : boolean {\n        return value !== null && value !== undefined && value.toString() !== Char.empty;\n    }\n\n    export function definedObject( object: any ) : boolean {\n        return defined( object ) && typeof object === \"object\";\n    }\n\n    export function definedBoolean( object: any ) : boolean {\n        return defined( object ) && typeof object === \"boolean\";\n    }\n\n    export function definedString( object: any ) : boolean {\n        return defined( object ) && typeof object === \"string\";\n    }\n\n    export function definedFunction( object: any ) : boolean {\n        return defined( object ) && typeof object === \"function\";\n    }\n\n    export function definedNumber( object: any ) : boolean {\n        return defined( object ) && typeof object === \"number\";\n    }\n\n    export function definedArray( object: any ) : boolean {\n        return definedObject( object ) && object instanceof Array;\n    }\n}","/**\n * JHson.js\n * \n * A JavaScript library for converting between HTML and JSON, with binding, templating, attributes, and CSS support.\n * \n * @file        jhson.ts\n * @version     v2.0.0\n * @author      Bunoon\n * @license     MIT License\n * @copyright   Bunoon 2024\n */\n\n\nimport { PublicApi, PublicApiHtml, PublicApiJson } from \"./ts/api\";\nimport { Constants } from \"./ts/constant\"\nimport { Is } from \"./ts/is\";\nimport { type Configuration } from \"./ts/type\";\n\n\ntype StringToJson = {\n    parsed: boolean;\n    object: any;\n};\n\n\n( () => {\n    // Variables: Configuration\n    let _configuration: Configuration = {} as Configuration;\n    \n    \n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Triggering Custom Events\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function fireCustomTriggerEvent( triggerFunction: Function, ...args : any[] ) : void {\n        if ( Is.definedFunction( triggerFunction ) ) {\n            triggerFunction.apply( null, [].slice.call( args, 0 ) );\n        }\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Default Parameter/Option Handling\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function getObjectFromString( objectString: any ) : StringToJson {\n        const result: StringToJson = {\n            parsed: true,\n            object: null\n        } as StringToJson;\n\n        try {\n            if ( Is.definedString( objectString ) ) {\n                result.object = JSON.parse( objectString );\n            }\n\n        } catch ( e1: any ) {\n            try {\n                result.object = eval( `(${objectString})` );\n\n                if ( Is.definedFunction( result.object ) ) {\n                    result.object = result.object();\n                }\n                \n            } catch ( e2: any ) {\n                if ( !_configuration.safeMode ) {\n                    console.error( _configuration.text!.objectErrorText!.replace( \"{{error_1}}\",  e1.message ).replace( \"{{error_2}}\",  e2.message ) );\n                    result.parsed = false;\n                }\n                \n                result.object = null;\n            }\n        }\n\n        return result;\n    }\n\n\n\t/*\n\t * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t * Public API Functions:\n\t * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t */\n\n    const _public: PublicApi = {\n        /*\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         * Public API Functions:  JSON\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         */\n\n        json: function () : PublicApiJson {\n            const scope: PublicApiJson = {\n                includeAttributes: function ( flag: boolean ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                includeCssProperties: function ( flag: boolean ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                includeText: function ( flag: boolean ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                includeChildren: function ( flag: boolean ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                friendlyFormat: function ( flag: boolean ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                indentSpaces: function ( spaces: number ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                ignoreNodeTypes: function ( types: string[] | string ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                ignoreCssProperties: function ( cssProperties: string[] | string ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                ignoreAttributes: function ( attributes: string[] | string ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                generateUniqueMissingIds: function ( flag: boolean ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                get: function ( element: HTMLElement ) : string {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                getVariables: function ( json: string ) : string[] {\n                    throw new Error(\"Function not implemented.\");\n                }\n            };\n\n            return scope;\n        },\n\n\n        /*\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         * Public API Functions:  HTML\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         */\n\n        html: function () : PublicApiHtml {\n            const scope: PublicApiHtml = {\n                json: function ( json: string ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                templateData: function ( templateData: Record<string, string> ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                removeOriginalAttributes: function ( flag: boolean ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                clearOriginalHTML: function ( flag: boolean ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                addCssToHead: function ( flag: boolean ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                clearCssFromHead: function ( flag: boolean ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                logTemplateDataWarnings: function ( flag: boolean ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                addAttributes: function ( flag: boolean ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                addCssProperties: function ( flag: boolean ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                addText: function ( flag: boolean ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                addChildren: function ( flag: boolean ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                write: function ( element: HTMLElement ) : PublicApi {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                getVariables: function ( element: HTMLElement ) : string[] {\n                    throw new Error(\"Function not implemented.\");\n                }\n            };\n\n            return scope;\n        },\n\n\n        /*\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         * Public API Functions:  Configuration\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         */\n\n        setConfiguration: function ( newConfiguration: any ): PublicApi {\n            throw new Error(\"Function not implemented.\");\n        },\n\n\n        /*\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         * Public API Functions:  Additional Data\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         */\n\n        getVersion: function (): string {\n            throw new Error(\"Function not implemented.\");\n        }\n    };\n\n    \n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Initialize JHson.js\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    ( () => {\n    \n    } )();\n} )();"]}