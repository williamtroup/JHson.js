{"version":3,"sources":["../src/ts/constant.ts","../src/ts/is.ts","../src/ts/data.ts","../src/ts/dom.ts","../src/jhson.ts"],"names":["Constant","Is","Data","String","result","DomElement"],"mappings":"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","sourcesContent":["/**\n * JHson.js\n * \n * A JavaScript library for converting between HTML and JSON, with binding, templating, attributes, and CSS support.\n * \n * @file        constant.js\n * @version     v2.0.0\n * @author      Bunoon\n * @license     MIT License\n * @copyright   Bunoon 2024\n */\n\n\nexport namespace Constant {\n    export const JHSON_JS_ATTRIBUTE_NAME = \"data-jhson-js\";\n}","/**\n * JHson.js\n * \n * A JavaScript library for converting between HTML and JSON, with binding, templating, attributes, and CSS support.\n * \n * @file        is.js\n * @version     v2.0.0\n * @author      Bunoon\n * @license     MIT License\n * @copyright   Bunoon 2024\n */\n\n\nimport { Char } from \"./enum\";\n\n\nexport namespace Is {\n    export function defined( value: any ) : boolean {\n        return value !== null && value !== undefined && value.toString() !== Char.empty;\n    }\n\n    export function definedObject( object: any ) : boolean {\n        return defined( object ) && typeof object === \"object\";\n    }\n\n    export function definedBoolean( object: any ) : boolean {\n        return defined( object ) && typeof object === \"boolean\";\n    }\n\n    export function definedString( object: any ) : boolean {\n        return defined( object ) && typeof object === \"string\";\n    }\n\n    export function definedFunction( object: any ) : boolean {\n        return defined( object ) && typeof object === \"function\";\n    }\n\n    export function definedNumber( object: any ) : boolean {\n        return defined( object ) && typeof object === \"number\";\n    }\n\n    export function definedArray( object: any ) : boolean {\n        return definedObject( object ) && object instanceof Array;\n    }\n}","/**\n * JHson.js\n * \n * A JavaScript library for converting between HTML and JSON, with binding, templating, attributes, and CSS support.\n * \n * @file        data.js\n * @version     v2.0.0\n * @author      Bunoon\n * @license     MIT License\n * @copyright   Bunoon 2024\n */\n\n\nimport { Char, Value } from \"./enum\";\nimport { Is } from \"./is\";\n\n\nexport namespace Data {\n    export namespace String {\n        export function newGuid() : string {\n            const result: string[] = [];\n    \n            for ( let charIndex: number = 0; charIndex < 32; charIndex++ ) {\n                if ( charIndex === 8 || charIndex === 12 || charIndex === 16 || charIndex === 20 ) {\n                    result.push( Char.dash );\n                }\n    \n                const character: string = Math.floor( Math.random() * 16 ).toString( 16 );\n                result.push( character );\n            }\n    \n            return result.join( Char.empty );\n        }\n    \n        export function startsWithAnyCase( data: string, start: string ) : boolean {\n            return data.substring( 0, start.length ).toLowerCase() === start.toLowerCase();\n        }\n\n        export function replaceAll( string: string, find: string, replace: string ) : string {\n            return string.replace( new RegExp( find.replace( Char.variableDefault, `[${Char.variableDefault}]` ), \"g\" ), replace );\n        }\n\n        export function getTemplateVariables( data: string ) : string[] {\n            const result: string[] = [];\n    \n            if ( Is.definedString( data ) ) {\n                let startIndex: number = 0;\n                let endIndex: number = 0;\n    \n                while ( startIndex > Value.notFound ) {\n                    startIndex = data.indexOf( Char.variableStart, endIndex );\n    \n                    if ( startIndex > Value.notFound ) {\n                        endIndex = data.indexOf( Char.variableEnd, startIndex );\n    \n                        if ( endIndex > Value.notFound ) {\n                            const variable: string = data.substring( startIndex, endIndex + Char.variableEnd.length );\n    \n                            result.push( variable );\n    \n                            endIndex += 2;\n                        }\n                    }\n                }\n            }\n    \n            return result;\n        }\n    }\n\n    export function getDefaultAnyString( value: any, defaultValue: string ) : string {\n        return typeof value === \"string\" ? value : defaultValue;\n    }\n\n    export function getDefaultString( value: any, defaultValue: string ) : string {\n        return Is.definedString( value ) ? value : defaultValue;\n    }\n\n    export function getDefaultBoolean( value: any, defaultValue: boolean ) : boolean {\n        return Is.definedBoolean( value ) ? value : defaultValue;\n    }\n\n    export function getDefaultNumber( value: any, defaultValue: number ) : number {\n        return Is.definedNumber( value ) ? value : defaultValue;\n    }\n\n    export function getDefaultFunction( value: any, defaultValue: object ) : any {\n        return Is.definedFunction( value ) ? value : defaultValue;\n    }\n\n    export function getDefaultArray( value: any, defaultValue: any[] ) : any[] {\n        return Is.definedArray( value ) ? value : defaultValue;\n    }\n\n    export function getDefaultObject( value: any, defaultValue: object ) : any {\n        return Is.definedObject( value ) ? value : defaultValue;\n    }\n\n    export function getDefaultStringOrArray( value: any, defaultValue: string[] ) : string[] {\n        let result: string[] = defaultValue;\n\n        if ( Is.definedString( value ) ) {\n            const values: string[] = value.toString().split( Char.space );\n\n            if ( values.length === 0 ) {\n                value = defaultValue;\n            } else {\n                result = values;\n            }\n\n        } else {\n            result = getDefaultArray( value, defaultValue );\n        }\n\n        return result;\n    }\n}","/**\n * JHson.js\n * \n * A JavaScript library for converting between HTML and JSON, with binding, templating, attributes, and CSS support.\n * \n * @file        dom.js\n * @version     v2.0.0\n * @author      Bunoon\n * @license     MIT License\n * @copyright   Bunoon 2024\n */\n\n\nimport { Char } from \"./enum\";\n\n\nexport namespace DomElement {\n    export function create( container: HTMLElement, type: string ) : HTMLElement {\n        const nodeType: string = type.toLowerCase();\n        const isText: boolean = nodeType === \"text\";\n\n        let result: any = isText ? document.createTextNode( Char.empty ) : document.createElement( nodeType );\n\n        container.appendChild( result );\n\n        return result;\n    }\n}","/**\n * JHson.js\n * \n * A JavaScript library for converting between HTML and JSON, with binding, templating, attributes, and CSS support.\n * \n * @file        jhson.ts\n * @version     v2.0.0\n * @author      Bunoon\n * @license     MIT License\n * @copyright   Bunoon 2024\n */\n\n\nimport {\n    type BindingOptionEvents,\n    type ConfigurationText,\n    type CurrentView,\n    type BindingOptions,\n    type Configuration } from \"./ts/type\";\n\nimport {\n    type PublicApi,\n    type PublicApiHtml,\n    type PublicApiJson } from \"./ts/api\";\n    \nimport { Constant } from \"./ts/constant\"\nimport { Data } from \"./ts/data\";\nimport { DomElement } from \"./ts/dom\";\nimport { Char, JsonValue, Value } from \"./ts/enum\";\nimport { Is } from \"./ts/is\";\n\n\ntype StringToJson = {\n    parsed: boolean;\n    object: any;\n};\n\ntype WritingScope = {\n    css: Record<string, string[]>;\n    templateDataKeys: string[];\n    templateDataKeysLength: number;\n    templateDataKeysProcessed: string[];\n};\n\ntype HtmlProperties = {\n    json: string;\n    templateData: Record<string, string>;\n    removeOriginalAttributes: boolean;\n    clearOriginalHTML: boolean;\n    addCssToHead: boolean;\n    clearCssFromHead: boolean;\n    logTemplateDataWarnings: boolean;\n    addAttributes: boolean;\n    addCssProperties: boolean;\n    addText: boolean;\n    addChildren: boolean;\n};\n\ntype JsonProperties = {\n    includeAttributes: boolean;\n    includeCssProperties: boolean;\n    includeText: boolean;\n    includeChildren: boolean;\n    friendlyFormat: boolean;\n    indentSpaces: number;\n    ignoreNodeTypes: string[];\n    ignoreCssProperties: string[];\n    ignoreAttributes: string[];\n    generateUniqueMissingIds: boolean;\n};\n\ntype ElementObject = {\n    nodeName: string;\n    nodeValues: Record<string, any>;\n};\n\n\n( () => {\n    // Variables: Configuration\n    let _configuration: Configuration = {} as Configuration;\n    \n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Rendering\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function render() : void {\n        const tagTypes: string[] = _configuration.domElementTypes as string[];\n        const tagTypesLength: number = tagTypes.length;\n\n        for ( let tagTypeIndex: number = 0; tagTypeIndex < tagTypesLength; tagTypeIndex++ ) {\n            const domElements: HTMLCollectionOf<Element> = document.getElementsByTagName( tagTypes[ tagTypeIndex ] );\n            const elements: HTMLElement[] = [].slice.call( domElements );\n            const elementsLength: number = elements.length;\n\n            for ( let elementIndex: number = 0; elementIndex < elementsLength; elementIndex++ ) {\n                if ( !renderBindingElement( elements[ elementIndex ] ) ) {\n                    break;\n                }\n            }\n        }\n    }\n\n    function renderBindingElement( element: HTMLElement ) : boolean {\n        let result: boolean = true;\n\n        if ( Is.defined( element ) && element.hasAttribute( Constant.JHSON_JS_ATTRIBUTE_NAME ) ) {\n            var bindingOptionsData = element.getAttribute( Constant.JHSON_JS_ATTRIBUTE_NAME );\n\n            if ( Is.definedString( bindingOptionsData ) ) {\n                var bindingOptions = getObjectFromString( bindingOptionsData );\n\n                if ( bindingOptions.parsed && Is.definedObject( bindingOptions.object ) ) {\n                    renderElement( renderBindingOptions( bindingOptions.object, element ) );\n\n                } else {\n                    if ( !_configuration.safeMode ) {\n                        console.error( _configuration.text!.attributeNotValidErrorText!.replace( \"{{attribute_name}}\", Constant.JHSON_JS_ATTRIBUTE_NAME ) );\n                        result = false;\n                    }\n                }\n\n            } else {\n                if ( !_configuration.safeMode ) {\n                    console.error( _configuration.text!.attributeNotSetErrorText!.replace( \"{{attribute_name}}\", Constant.JHSON_JS_ATTRIBUTE_NAME ) );\n                    result = false;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    function renderBindingOptions( data: any, element: HTMLElement ) : BindingOptions {\n        const bindingOptions: BindingOptions = buildAttributeOptions( data );\n        bindingOptions._currentView = {} as CurrentView;\n        bindingOptions._currentView.element = element;\n\n        return bindingOptions;\n    }\n\n    function renderElement( bindingOptions: BindingOptions ) : void {\n        fireCustomTriggerEvent( bindingOptions.events!.onBeforeRender!, bindingOptions._currentView.element );\n\n        const properties: HtmlProperties = getDefaultHtmlProperties();\n        properties.json = bindingOptions.json!;\n\n        writeHtml( bindingOptions._currentView.element, properties );\n\n        fireCustomTriggerEvent( bindingOptions.events!.onRenderComplete!, bindingOptions._currentView.element );\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Binding Options\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function buildAttributeOptions( newOptions: any ) {\n        let options: BindingOptions = Data.getDefaultObject( newOptions, {} as BindingOptions );\n        const optionPropertyDefaults: HtmlProperties = getDefaultHtmlProperties();\n\n        options.json = Data.getDefaultString( options.json, optionPropertyDefaults.json );\n        options.templateData = Data.getDefaultObject( options.templateData, optionPropertyDefaults.templateData );\n        options.removeOriginalAttributes = Data.getDefaultBoolean( options.removeOriginalAttributes, optionPropertyDefaults.removeOriginalAttributes );\n        options.clearOriginalHTML = Data.getDefaultBoolean( options.clearOriginalHTML, optionPropertyDefaults.clearOriginalHTML );\n        options.addCssToHead = Data.getDefaultBoolean( options.addCssToHead, optionPropertyDefaults.addCssToHead );\n        options.clearCssFromHead = Data.getDefaultBoolean( options.clearCssFromHead, optionPropertyDefaults.clearCssFromHead );\n        options.logTemplateDataWarnings = Data.getDefaultBoolean( options.logTemplateDataWarnings, optionPropertyDefaults.logTemplateDataWarnings );\n        options.addAttributes = Data.getDefaultBoolean( options.addAttributes, optionPropertyDefaults.addAttributes );\n        options.addCssProperties = Data.getDefaultBoolean( options.addCssProperties, optionPropertyDefaults.addCssProperties );\n        options.addText = Data.getDefaultBoolean( options.addText, optionPropertyDefaults.addText );\n        options.addChildren = Data.getDefaultBoolean( options.addChildren, optionPropertyDefaults.addChildren );\n\n        options = buildAttributeOptionCustomTriggers( options );\n\n        return options;\n    }\n\n    function buildAttributeOptionCustomTriggers( options: BindingOptions ) : BindingOptions {\n        options.events = Data.getDefaultObject( options.events, {} as BindingOptionEvents );\n        options.events!.onBeforeRender = Data.getDefaultFunction( options.events!.onBeforeRender, null! );\n        options.events!.onRenderComplete = Data.getDefaultFunction( options.events!.onRenderComplete, null! );\n\n        return options;\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * JSON - Get\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function getDefaultJsonProperties() : JsonProperties {\n        return {\n            includeAttributes: true,\n            includeCssProperties: false,\n            includeText: true,\n            includeChildren: true,\n            friendlyFormat: true,\n            indentSpaces: 2,\n            ignoreNodeTypes: [],\n            ignoreCssProperties: [],\n            ignoreAttributes: [],\n            generateUniqueMissingIds: false\n        } as JsonProperties;\n    }\n\n    function getJSON( element: HTMLElement, properties: JsonProperties ) : string {\n        let result: string = Char.empty;\n\n        if ( Is.definedObject( element ) ) {\n            const resultJson: any = {};\n            const elementJson: ElementObject = getElementObject( element, properties, {} );\n\n            resultJson[ elementJson.nodeName ] = elementJson.nodeValues;\n\n            if ( properties.friendlyFormat ) {\n                result = JSON.stringify( resultJson, null, properties.indentSpaces );\n            } else {\n                result = JSON.stringify( resultJson );\n            }\n        }\n        \n        return result;\n    }\n\n    function getElementObject( element: HTMLElement, properties: JsonProperties, parentCssStyles: Record<string, string> ) : ElementObject {\n        const result: Record<string, any> = {};\n        const childrenLength: number = element.children.length;\n        let childrenAdded: number = 0;\n\n        if ( properties.includeAttributes ) {\n            getElementAttributes( element, result, properties );\n        }\n\n        if ( properties.includeCssProperties ) {\n            getElementCssProperties( element, result, properties, parentCssStyles );\n        }\n\n        if ( properties.includeChildren && childrenLength > 0 ) {\n            childrenAdded = getElementChildren( element, result, childrenLength, properties, parentCssStyles );\n        }\n\n        if ( properties.includeText ) {\n            getElementText( element, result, childrenAdded );\n        }\n\n        if ( result.hasOwnProperty( JsonValue.children ) && result[ JsonValue.children ].length === 0 ) {\n            delete result[ JsonValue.children ];\n        }\n\n        return {\n            nodeName: element.nodeName.toLowerCase(),\n            nodeValues: result\n        } as ElementObject;\n    }\n\n    function getElementAttributes( element: HTMLElement, result: Record<string, any>, properties: JsonProperties ) : void {\n        const attributesLength: number = element.attributes.length;\n        const attributesAvailable: string[] = [];\n\n        if ( properties.includeText && element.nodeName.toLowerCase() === \"textarea\" ) {\n            const textArea: HTMLTextAreaElement = element as HTMLTextAreaElement;\n\n            if ( Is.defined( textArea.value ) ) {\n                result[ JsonValue.text ] = textArea.value;\n            }\n        }\n\n        for ( let attributeIndex: number = 0; attributeIndex < attributesLength; attributeIndex++ ) {\n            const attribute: Attr = element.attributes[ attributeIndex ];\n\n            if ( Is.definedString( attribute.nodeName ) && properties.ignoreAttributes.indexOf( attribute.nodeName ) === Value.notFound ) {\n                result[ JsonValue.attribute + attribute.nodeName ] = attribute.nodeValue;\n                attributesAvailable.push( attribute.nodeName );\n            }\n        }\n\n        if ( properties.generateUniqueMissingIds && attributesAvailable.indexOf( \"id\" ) === Value.notFound && properties.ignoreAttributes.indexOf( \"id\" ) === Value.notFound) {\n            result[ `${JsonValue.attribute}id` ] = Data.String.newGuid();\n        }\n    }\n\n    function getElementCssProperties( element: HTMLElement, result: Record<string, any>, properties: JsonProperties, parentCssStyles: Record<string, string> ) : void {\n        const computedStyles: CSSStyleDeclaration = getComputedStyle( element );\n        const computedStylesLength: number = computedStyles.length;\n\n        for ( let cssComputedStyleIndex: number = 0; cssComputedStyleIndex < computedStylesLength; cssComputedStyleIndex++ ) {\n            const cssComputedStyleName: string = computedStyles[ cssComputedStyleIndex ];\n\n            if ( properties.ignoreCssProperties.indexOf( cssComputedStyleName ) === Value.notFound ) {\n                const cssComputedStyleNameStorage: string = JsonValue.cssStyle + cssComputedStyleName;\n                const cssComputedValue: string = computedStyles.getPropertyValue( cssComputedStyleName );\n\n                if ( !parentCssStyles.hasOwnProperty( cssComputedStyleNameStorage ) || parentCssStyles[ cssComputedStyleNameStorage ] !== cssComputedValue ) {\n                    result[ cssComputedStyleNameStorage ] = cssComputedValue;\n                    parentCssStyles[ cssComputedStyleNameStorage ] = result[ cssComputedStyleNameStorage ];\n                }\n            }\n        }\n    }\n\n    function getElementChildren( element: HTMLElement, result: Record<string, any>, childrenLength: number, properties: JsonProperties, parentCssStyles: Record<string, string> ) : number {\n        let totalChildren: number = 0;\n        \n        result[ JsonValue.children ] = [];\n\n        for ( let childrenIndex: number = 0; childrenIndex < childrenLength; childrenIndex++ ) {\n            const child: HTMLElement = element.children[ childrenIndex ] as HTMLElement;\n            const childElementData: ElementObject = getElementObject( child, properties, getParentCssStylesCopy( parentCssStyles ) );\n            let addChild: boolean = false;\n\n            if ( _configuration.formattingNodeTypes.indexOf( childElementData.nodeName ) > Value.notFound ) {\n                totalChildren++;\n            } else {\n\n                if ( properties.ignoreNodeTypes.indexOf( childElementData.nodeName ) === Value.notFound ) {\n                    addChild = true;\n                    totalChildren++;\n                }\n            }\n\n            if ( addChild ) {\n                const childJson: Record<string, any> = {} as Record<string, any>;\n                childJson[ childElementData.nodeName ] = childElementData.nodeValues;\n\n                result[ JsonValue.children ].push( childJson );\n            }\n        }\n\n        return totalChildren;\n    }\n\n    function getElementText( element: HTMLElement, result: Record<string, any>, childrenAdded: number ) : void {\n        if ( Is.definedString( element.innerText ) ) {\n            if ( childrenAdded > 0 && result.hasOwnProperty( JsonValue.children ) && result[ JsonValue.children ].length === 0 ) {\n                result[ JsonValue.text ] = element.innerHTML;\n            } else {\n    \n                if ( element.innerText.trim() === element.innerHTML.trim() ) {\n                    result[ JsonValue.text ] = element.innerText;\n                }\n            }\n        }\n    }\n\n    function getParentCssStylesCopy( parentCssStyles: Record<string, string> ) : Record<string, string> {\n        const copy: Record<string, string> = {};\n\n        for ( let cssStyleName in parentCssStyles ) {\n            if ( parentCssStyles.hasOwnProperty( cssStyleName ) ) {\n                copy[ cssStyleName ] = parentCssStyles[ cssStyleName ];\n            }\n        }\n\n        return copy;\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * JSON - Write HTML\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function getDefaultHtmlProperties() : HtmlProperties {\n        return {\n            json: Char.empty,\n            templateData: {},\n            removeOriginalAttributes: true,\n            clearOriginalHTML: true,\n            addCssToHead: false,\n            clearCssFromHead: false,\n            logTemplateDataWarnings: false,\n            addAttributes: true,\n            addCssProperties: true,\n            addText: true,\n            addChildren: true\n        } as HtmlProperties;\n    }\n\n    function writeHtml( element: HTMLElement, properties: HtmlProperties ) : PublicApi {\n        if ( Is.definedObject( element ) && Is.definedString( properties.json ) ) {\n            const convertedJsonObject: StringToJson = getObjectFromString( properties.json );\n            const writingScope: WritingScope = {\n                css: {},\n                templateDataKeys: [],\n                templateDataKeysLength: 0,\n                templateDataKeysProcessed: []\n            } as WritingScope;\n\n            if ( convertedJsonObject.parsed && Is.definedObject( convertedJsonObject.object ) ) {\n                if ( properties.clearCssFromHead ) {\n                    clearCssStyleTagsFromHead();\n                }\n    \n                if ( Is.definedObject( properties.templateData ) ) {\n                    setupWritingScopeTemplateDataKeys( properties, writingScope );\n                }\n\n                for ( let key in convertedJsonObject.object ) {\n                    if ( key === element.nodeName.toLowerCase() ) {\n                        if ( properties.removeOriginalAttributes ) {\n                            while ( element.attributes.length > 0 ) {\n                                element.removeAttribute( element.attributes[ 0 ].name );\n                            }\n                        }\n\n                        if ( properties.clearOriginalHTML ) {\n                            element.innerHTML = Char.empty;\n                        }\n\n                        writeNode( element, convertedJsonObject.object[ key ], properties, writingScope );\n                    }\n                }\n\n                processRemainingVariablesForDefaults( element );\n\n                if ( properties.addCssToHead ) {\n                    writeCssStyleTag( writingScope );\n                }\n    \n                if ( properties.logTemplateDataWarnings ) {\n                    checkedForUnusedTemplateData( writingScope );\n                }\n            }\n        }\n\n        return _public;\n    }\n\n    function setupWritingScopeTemplateDataKeys( properties: HtmlProperties, writingScope: WritingScope ) : void {\n        for ( let templateDataKey in properties.templateData ) {\n            if ( properties.templateData.hasOwnProperty( templateDataKey ) ) {\n                writingScope.templateDataKeys.push( templateDataKey );\n            }\n        }\n\n        writingScope.templateDataKeys = writingScope.templateDataKeys.sort( function( a, b ) {\n            return b.length - a.length;\n        } );\n\n        writingScope.templateDataKeysLength = writingScope.templateDataKeys.length;\n    }\n\n    function writeNode( element: HTMLElement, jsonObject: any, properties: HtmlProperties, writingScope: WritingScope ) : void {\n        const cssStyles: string[] = [];\n\n        for ( let jsonKey in jsonObject ) {\n            if ( Data.String.startsWithAnyCase( jsonKey, JsonValue.attribute ) ) {\n                if ( properties.addAttributes ) {\n                    const attributeName: string = jsonKey.replace( JsonValue.attribute, Char.empty );\n                    const attributeValue: string = jsonObject[ jsonKey ];\n\n                    element.setAttribute( attributeName, attributeValue );\n                }\n\n            } else if ( Data.String.startsWithAnyCase( jsonKey, JsonValue.cssStyle ) ) {\n                if ( properties.addCssProperties ) {\n                    const cssStyleName: string = jsonKey.replace( JsonValue.cssStyle, Char.empty );\n\n                    if ( !properties.addCssToHead ) {\n                        element.style.setProperty( cssStyleName, jsonObject[ jsonKey ] );\n                    } else {\n                        cssStyles.push( `${cssStyleName}:${jsonObject[jsonKey]};` );\n                    }\n                }\n\n            } else if ( jsonKey === JsonValue.text ) {\n                if ( properties.addText ) {\n                    writeElementTextAndTemplateData( element, jsonObject[ jsonKey ], properties, writingScope );\n                }\n\n            } else if ( jsonKey === JsonValue.children ) {\n                if ( properties.addChildren ) {\n                    const childrenLength: number = jsonObject[ jsonKey ].length;\n\n                    for ( let childrenIndex: number = 0; childrenIndex < childrenLength; childrenIndex++ ) {\n                        const childJson: any = jsonObject[ jsonKey ][ childrenIndex ];\n    \n                        for ( let childJsonKey in childJson ) {\n                            if ( childJson.hasOwnProperty( childJsonKey ) ) {\n                                const childElement: HTMLElement = DomElement.create( element, childJsonKey.toLowerCase() );\n    \n                                writeNode( childElement, childJson[ childJsonKey ], properties, writingScope );\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if ( cssStyles.length > 0 ) {\n            storeCssStyles( element, cssStyles, writingScope );\n        } \n    }\n\n    function writeElementTextAndTemplateData( element: HTMLElement, value: string, properties: HtmlProperties, writingScope: WritingScope ) : void {\n        element.innerHTML = value;\n\n        if ( writingScope.templateDataKeysLength > 0 ) {\n            for ( let templateDataKeyIndex: number = 0; templateDataKeyIndex <  writingScope.templateDataKeysLength; templateDataKeyIndex++ ) {\n                let templateDataKey: string = writingScope.templateDataKeys[ templateDataKeyIndex ];\n\n                if ( properties.templateData.hasOwnProperty( templateDataKey ) ) {\n                    const templateDataKeyReplacement: string = properties.templateData[ templateDataKey ];\n\n                    if ( element.innerHTML.indexOf( templateDataKey ) > Value.notFound ) {\n                        element.innerHTML = Data.String.replaceAll( element.innerHTML, templateDataKey, templateDataKeyReplacement );\n\n                        if ( writingScope.templateDataKeysProcessed.indexOf( templateDataKey ) === Value.notFound ) {\n                            writingScope.templateDataKeysProcessed.push( templateDataKey );\n                        }\n\n                    } else {\n                        templateDataKey = templateDataKey.replace( Char.variableEnd, Char.empty ) + Char.space + Char.variableDefault;\n\n                        const startIndex: number = element.innerHTML.indexOf( templateDataKey );\n\n                        if ( startIndex > Value.notFound ) {\n                            const endIndex: number = element.innerHTML.indexOf( Char.variableEnd, startIndex );\n\n                            if ( endIndex > Value.notFound ) {\n                                const variable: string = element.innerHTML.substring( startIndex, endIndex + Char.variableEnd.length );\n                                \n                                element.innerHTML = Data.String.replaceAll( element.innerHTML, variable, templateDataKeyReplacement );\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    function storeCssStyles( element: HTMLElement, cssStyles: string[], writingScope: WritingScope ) : void {\n        let identifier: string = null!;\n\n        if ( Is.definedString( element.className ) ) {\n            const classNameParts: string[] = element.className.split( Char.space );\n\n            identifier = `${element.nodeName.toLowerCase()}.${classNameParts[0]} {`;\n        } else {\n\n            if ( !Is.definedString( element.id ) ) {\n                element.id = Data.String.newGuid();\n            }\n\n            identifier = `#${element.id} {`;\n        }\n\n        let cssLines: string[] = [];\n        cssLines.push( identifier );\n        cssLines = cssLines.concat( cssStyles );\n        cssLines.push( \"}\" );\n\n        writingScope.css[ element.id ] = cssLines;\n    }\n\n    function writeCssStyleTag( writingScope: WritingScope ) : void {\n        const head: HTMLElement = document.getElementsByTagName( \"head\" )[ 0 ];\n        let cssLines: string[] = [];\n\n        for ( let elementId in writingScope.css ) {\n            if ( writingScope.css.hasOwnProperty( elementId ) ) {\n                cssLines = cssLines.concat( writingScope.css[ elementId ] );\n            }\n        }\n\n        const style: HTMLStyleElement = DomElement.create( head, \"style\" ) as HTMLStyleElement;\n        style.appendChild( document.createTextNode( cssLines.join( Char.newLine ) ) );\n    }\n\n    function clearCssStyleTagsFromHead() : void {\n        const styles: HTMLElement[] = [].slice.call( document.getElementsByTagName( \"styles\" ) );\n        const stylesLength: number = styles.length;\n\n        for ( let styleIndex: number = 0; styleIndex < stylesLength; styleIndex++ ) {\n            styles[ styleIndex ].parentNode!.removeChild( styles[ styleIndex ] );\n        }\n    }\n\n    function checkedForUnusedTemplateData( writingScope: WritingScope ) : void {\n        const templateDataKeysProcessedLength: number = writingScope.templateDataKeysProcessed.length;\n\n        if ( writingScope.templateDataKeysLength > templateDataKeysProcessedLength ) {\n            for ( let templateDataKeyIndex: number = 0; templateDataKeyIndex < writingScope.templateDataKeysLength; templateDataKeyIndex++ ) {\n                const templateDataKey: string = writingScope.templateDataKeys[ templateDataKeyIndex ];\n\n                if ( writingScope.templateDataKeysProcessed.indexOf( templateDataKey ) === Value.notFound ) {\n                    console.warn( _configuration.text!.variableWarningText!.replace( \"{{variable_name}}\", templateDataKey ) );\n                }\n            }\n        }\n    }\n\n    function processRemainingVariablesForDefaults( element: HTMLElement ) : void {\n        const remainingVariables: string[] = Data.String.getTemplateVariables( element.innerHTML );\n        const remainingVariablesLength: number = remainingVariables.length;\n        \n        for ( let remainingVariableIndex: number = 0; remainingVariableIndex < remainingVariablesLength; remainingVariableIndex++ ) {\n            const variable: string = remainingVariables[ remainingVariableIndex ];\n\n            if ( variable.indexOf( Char.variableDefault ) > Value.notFound ) {\n                const defaultValue: string = variable\n                    .replace( Char.variableStart, Char.empty )\n                    .replace( Char.variableEnd, Char.empty )\n                    .split( Char.variableDefault )[ 1 ];\n\n                if ( Is.definedString( defaultValue ) ) {\n                    element.innerHTML = element.innerHTML.replace( variable, defaultValue.trim() );\n                }\n            }\n        }\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Triggering Custom Events\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function fireCustomTriggerEvent( triggerFunction: Function, ...args : any[] ) : void {\n        if ( Is.definedFunction( triggerFunction ) ) {\n            triggerFunction.apply( null, [].slice.call( args, 0 ) );\n        }\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Default Parameter/Option Handling\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function getObjectFromString( objectString: any ) : StringToJson {\n        const result: StringToJson = {\n            parsed: true,\n            object: null\n        } as StringToJson;\n\n        try {\n            if ( Is.definedString( objectString ) ) {\n                result.object = JSON.parse( objectString );\n            }\n\n        } catch ( e1: any ) {\n            try {\n                result.object = eval( `(${objectString})` );\n\n                if ( Is.definedFunction( result.object ) ) {\n                    result.object = result.object();\n                }\n                \n            } catch ( e2: any ) {\n                if ( !_configuration.safeMode ) {\n                    console.error( _configuration.text!.objectErrorText!.replace( \"{{error_1}}\",  e1.message ).replace( \"{{error_2}}\",  e2.message ) );\n                    result.parsed = false;\n                }\n                \n                result.object = null;\n            }\n        }\n\n        return result;\n    }\n\n\n\t/*\n\t * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t * Public API Functions:  Helpers:  Configuration\n\t * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t */\n\n    function buildDefaultConfiguration( newConfiguration: any = null ) : void {\n        _configuration = Data.getDefaultObject( newConfiguration, {} as Configuration );\n        _configuration.safeMode = Data.getDefaultBoolean( _configuration.safeMode, true );\n        _configuration.domElementTypes = Data.getDefaultStringOrArray( _configuration.domElementTypes, [ \"*\" ] );\n        _configuration.formattingNodeTypes = Data.getDefaultStringOrArray( _configuration.formattingNodeTypes, [\n            \"b\",\n            \"strong\",\n            \"i\",\n            \"em\",\n            \"mark\",\n            \"small\",\n            \"del\",\n            \"ins\",\n            \"sub\",\n            \"sup\"\n        ] );\n\n        buildDefaultConfigurationStrings();\n    }\n\n    function buildDefaultConfigurationStrings() : void {\n        _configuration.text = Data.getDefaultObject( _configuration.text, {} as ConfigurationText );\n        _configuration.text!.variableWarningText = Data.getDefaultString( _configuration.text!.variableWarningText, \"Template variable {{variable_name}} not found.\" );\n        _configuration.text!.objectErrorText = Data.getDefaultString( _configuration.text!.objectErrorText, \"Errors in object: {{error_1}}, {{error_2}}\" );\n        _configuration.text!.attributeNotValidErrorText = Data.getDefaultString( _configuration.text!.attributeNotValidErrorText, \"The attribute '{{attribute_name}}' is not a valid object.\" );\n        _configuration.text!.attributeNotSetErrorText = Data.getDefaultString( _configuration.text!.attributeNotSetErrorText, \"The attribute '{{attribute_name}}' has not been set correctly.\" );        \n    }\n\n\n\t/*\n\t * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t * Public API Functions:\n\t * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t */\n\n    const _public: PublicApi = {\n        /*\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         * Public API Functions:  JSON\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         */\n\n        json: function () : PublicApiJson {\n            const properties: JsonProperties = getDefaultJsonProperties();\n\n            const scope: PublicApiJson = {\n                includeAttributes: function ( flag: boolean ) : PublicApiJson {\n                    properties.includeAttributes = Data.getDefaultBoolean( flag, properties.includeAttributes );\n\n                    return this;\n                },\n\n                includeCssProperties: function ( flag: boolean ) : PublicApiJson {\n                    properties.includeCssProperties = Data.getDefaultBoolean( flag, properties.includeCssProperties );\n\n                    return this;\n                },\n\n                includeText: function ( flag: boolean ) : PublicApiJson {\n                    properties.includeText = Data.getDefaultBoolean( flag, properties.includeText );\n\n                    return this;\n                },\n\n                includeChildren: function ( flag: boolean ) : PublicApiJson {\n                    properties.includeChildren = Data.getDefaultBoolean( flag, properties.includeChildren );\n\n                    return this;\n                },\n\n                friendlyFormat: function ( flag: boolean ) : PublicApiJson {\n                    properties.friendlyFormat = Data.getDefaultBoolean( flag, properties.friendlyFormat );\n\n                    return this;\n                },\n\n                indentSpaces: function ( spaces: number ) : PublicApiJson {\n                    properties.indentSpaces = Data.getDefaultNumber( spaces, properties.indentSpaces );\n\n                    return this;\n                },\n\n                ignoreNodeTypes: function ( types: string[] | string ) : PublicApiJson {\n                    properties.ignoreNodeTypes = Data.getDefaultStringOrArray( types, properties.ignoreNodeTypes );\n\n                    return this;\n                },\n\n                ignoreCssProperties: function ( cssProperties: string[] | string ) : PublicApiJson {\n                    properties.ignoreCssProperties = Data.getDefaultStringOrArray( cssProperties, properties.ignoreCssProperties );\n\n                    return this;\n                },\n\n                ignoreAttributes: function ( attributes: string[] | string ) : PublicApiJson {\n                    properties.ignoreAttributes = Data.getDefaultStringOrArray( attributes, properties.ignoreAttributes );\n\n                    return this;\n                },\n\n                generateUniqueMissingIds: function ( flag: boolean ) : PublicApiJson {\n                    properties.generateUniqueMissingIds = Data.getDefaultBoolean( flag, properties.generateUniqueMissingIds );\n\n                    return this;\n                },\n\n                get: function ( element: HTMLElement ) : string {\n                    return getJSON( element, properties );\n                },\n\n                getVariables: function ( json: string ) : string[] {\n                    return Data.String.getTemplateVariables( json );\n                }\n            };\n\n            return scope;\n        },\n\n\n        /*\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         * Public API Functions:  HTML\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         */\n\n        html: function () : PublicApiHtml {\n            const properties: HtmlProperties = getDefaultHtmlProperties();\n\n            const scope: PublicApiHtml = {\n                json: function ( json: string ) : PublicApiHtml {\n                    properties.json = Data.getDefaultString( json, properties.json );\n\n                    return scope;\n                },\n\n                templateData: function ( templateData: Record<string, string> ) : PublicApiHtml {\n                    properties.templateData = Data.getDefaultObject( templateData, properties.templateData );\n\n                    return scope;\n                },\n\n                removeOriginalAttributes: function ( flag: boolean ) : PublicApiHtml {\n                    properties.removeOriginalAttributes = Data.getDefaultBoolean( flag, properties.removeOriginalAttributes );\n\n                    return scope;\n                },\n\n                clearOriginalHTML: function ( flag: boolean ) : PublicApiHtml {\n                    properties.clearOriginalHTML = Data.getDefaultBoolean( flag, properties.clearOriginalHTML );\n\n                    return scope;\n                },\n\n                addCssToHead: function ( flag: boolean ) : PublicApiHtml {\n                    properties.addCssToHead = Data.getDefaultBoolean( flag, properties.addCssToHead );\n\n                    return scope;\n                },\n\n                clearCssFromHead: function ( flag: boolean ) : PublicApiHtml {\n                    properties.clearCssFromHead = Data.getDefaultBoolean( flag, properties.clearCssFromHead );\n\n                    return scope;\n                },\n\n                logTemplateDataWarnings: function ( flag: boolean ) : PublicApiHtml {\n                    properties.logTemplateDataWarnings = Data.getDefaultBoolean( flag, properties.logTemplateDataWarnings );\n\n                    return scope;\n                },\n\n                addAttributes: function ( flag: boolean ) : PublicApiHtml {\n                    properties.addAttributes = Data.getDefaultBoolean( flag, properties.addAttributes );\n\n                    return scope;\n                },\n\n                addCssProperties: function ( flag: boolean ) : PublicApiHtml {\n                    properties.addCssProperties = Data.getDefaultBoolean( flag, properties.addCssProperties );\n\n                    return scope;\n                },\n\n                addText: function ( flag: boolean ) : PublicApiHtml {\n                    properties.addText = Data.getDefaultBoolean( flag, properties.addText );\n\n                    return scope;\n                },\n\n                addChildren: function ( flag: boolean ) : PublicApiHtml {\n                    properties.addChildren = Data.getDefaultBoolean( flag, properties.addChildren );\n\n                    return scope;\n                },\n\n                write: function ( element: HTMLElement ) : PublicApi {\n                    return writeHtml( element, properties );\n                },\n\n                getVariables: function ( element: HTMLElement ) : string[] {\n                    let result: string[] = [];\n\n                    if ( Is.definedObject( element ) ) {\n                        result = Data.String.getTemplateVariables( element.innerHTML );\n                    }\n                    \n                    return result;\n                }\n            };\n\n            return scope;\n        },\n\n\n        /*\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         * Public API Functions:  Configuration\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         */\n\n        setConfiguration: function ( newConfiguration: any ): PublicApi {\n            if ( Is.definedObject( newConfiguration ) ) {\n                let configurationHasChanged: boolean = false;\n                const newInternalConfiguration: any = _configuration;\n            \n                for ( let propertyName in newConfiguration ) {\n                    if ( newConfiguration.hasOwnProperty( propertyName ) && _configuration.hasOwnProperty( propertyName ) && newInternalConfiguration[ propertyName ] !== newConfiguration[ propertyName ] ) {\n                        newInternalConfiguration[ propertyName ] = newConfiguration[ propertyName ];\n                        configurationHasChanged = true;\n                    }\n                }\n        \n                if ( configurationHasChanged ) {\n                    buildDefaultConfiguration( newInternalConfiguration );\n                }\n            }\n    \n            return _public;\n        },\n\n\n        /*\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         * Public API Functions:  Additional Data\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         */\n\n        getVersion: function (): string {\n            return \"2.0.0\";\n        }\n    };\n\n    \n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Initialize JHson.js\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    ( () => {\n        buildDefaultConfiguration();\n\n        document.addEventListener( \"DOMContentLoaded\", function() {\n            render();\n        } );\n\n        if ( !Is.defined( window.$jhson ) ) {\n            window.$jhson = _public;\n        }\n    } )();\n} )();"]}