{"version":3,"sources":["../src/ts/enum.ts","../src/ts/is.ts","../src/jhson.ts"],"names":["Is"],"mappings":";;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAgBiB;AAhBjB;AAAA;AAAA;AAaA;AAGO,MAAUA,QAAV;AACI,eAAS,QAAS,OAAuB;AAC5C,eAAO,UAAU,QAAQ,UAAU,UAAa,MAAM,SAAS;AAAA,MACnE;AAFO,MAAAA,IAAS;AAIT,eAAS,cAAe,QAAwB;AACnD,eAAO,QAAS,MAAO,KAAK,OAAO,WAAW;AAAA,MAClD;AAFO,MAAAA,IAAS;AAIT,eAAS,eAAgB,QAAwB;AACpD,eAAO,QAAS,MAAO,KAAK,OAAO,WAAW;AAAA,MAClD;AAFO,MAAAA,IAAS;AAIT,eAAS,cAAe,QAAwB;AACnD,eAAO,QAAS,MAAO,KAAK,OAAO,WAAW;AAAA,MAClD;AAFO,MAAAA,IAAS;AAIT,eAAS,gBAAiB,QAAwB;AACrD,eAAO,QAAS,MAAO,KAAK,OAAO,WAAW;AAAA,MAClD;AAFO,MAAAA,IAAS;AAIT,eAAS,cAAe,QAAwB;AACnD,eAAO,QAAS,MAAO,KAAK,OAAO,WAAW;AAAA,MAClD;AAFO,MAAAA,IAAS;AAIT,eAAS,aAAc,QAAwB;AAClD,eAAO,cAAe,MAAO,KAAK,kBAAkB;AAAA,MACxD;AAFO,MAAAA,IAAS;AAAA,OAzBH;AAAA;AAAA;;;AChBjB;AAAA;AAeA;AAUA,IAAE,uBAAM;AAEJ,UAAI,iBAAgC,CAAC;AASrC,eAAS,uBAAwB,oBAA8B,MAAsB;AACjF,YAAK,GAAG,gBAAiB,eAAgB,GAAI;AACzC,0BAAgB,MAAO,MAAM,CAAC,EAAE,MAAM,KAAM,MAAM,CAAE,CAAE;AAAA,QAC1D;AAAA,MACJ;AASA,eAAS,oBAAqB,cAAmC;AAC7D,cAAM,SAAuB;AAAA,UACzB,QAAQ;AAAA,UACR,QAAQ;AAAA,QACZ;AAEA,YAAI;AACA,cAAK,GAAG,cAAe,YAAa,GAAI;AACpC,mBAAO,SAAS,KAAK,MAAO,YAAa;AAAA,UAC7C;AAAA,QAEJ,SAAU,IAAU;AAChB,cAAI;AACA,mBAAO,SAAS,KAAM,IAAI,YAAY,GAAI;AAE1C,gBAAK,GAAG,gBAAiB,OAAO,MAAO,GAAI;AACvC,qBAAO,SAAS,OAAO,OAAO;AAAA,YAClC;AAAA,UAEJ,SAAU,IAAU;AAChB,gBAAK,CAAC,eAAe,UAAW;AAC5B,sBAAQ,MAAO,eAAe,KAAM,gBAAiB,QAAS,eAAgB,GAAG,OAAQ,EAAE,QAAS,eAAgB,GAAG,OAAQ,CAAE;AACjI,qBAAO,SAAS;AAAA,YACpB;AAEA,mBAAO,SAAS;AAAA,UACpB;AAAA,QACJ;AAEA,eAAO;AAAA,MACX;AASA,YAAM,UAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAOvB,MAAM,WAA4B;AAC9B,gBAAM,QAAuB;AAAA,YACzB,mBAAmB,SAAW,MAAgC;AAC1D,oBAAM,IAAI,MAAM,2BAA2B;AAAA,YAC/C;AAAA,YAEA,sBAAsB,SAAW,MAAgC;AAC7D,oBAAM,IAAI,MAAM,2BAA2B;AAAA,YAC/C;AAAA,YAEA,aAAa,SAAW,MAAgC;AACpD,oBAAM,IAAI,MAAM,2BAA2B;AAAA,YAC/C;AAAA,YAEA,iBAAiB,SAAW,MAAgC;AACxD,oBAAM,IAAI,MAAM,2BAA2B;AAAA,YAC/C;AAAA,YAEA,gBAAgB,SAAW,MAAgC;AACvD,oBAAM,IAAI,MAAM,2BAA2B;AAAA,YAC/C;AAAA,YAEA,cAAc,SAAW,QAAiC;AACtD,oBAAM,IAAI,MAAM,2BAA2B;AAAA,YAC/C;AAAA,YAEA,iBAAiB,SAAW,OAA2C;AACnE,oBAAM,IAAI,MAAM,2BAA2B;AAAA,YAC/C;AAAA,YAEA,qBAAqB,SAAW,eAAmD;AAC/E,oBAAM,IAAI,MAAM,2BAA2B;AAAA,YAC/C;AAAA,YAEA,kBAAkB,SAAW,YAAgD;AACzE,oBAAM,IAAI,MAAM,2BAA2B;AAAA,YAC/C;AAAA,YAEA,0BAA0B,SAAW,MAAgC;AACjE,oBAAM,IAAI,MAAM,2BAA2B;AAAA,YAC/C;AAAA,YAEA,KAAK,SAAW,SAAgC;AAC5C,oBAAM,IAAI,MAAM,2BAA2B;AAAA,YAC/C;AAAA,YAEA,cAAc,SAAW,MAA0B;AAC/C,oBAAM,IAAI,MAAM,2BAA2B;AAAA,YAC/C;AAAA,UACJ;AAEA,iBAAO;AAAA,QACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QASA,MAAM,WAA4B;AAC9B,gBAAM,QAAuB;AAAA,YACzB,MAAM,SAAW,MAA+B;AAC5C,oBAAM,IAAI,MAAM,2BAA2B;AAAA,YAC/C;AAAA,YAEA,cAAc,SAAW,cAAuD;AAC5E,oBAAM,IAAI,MAAM,2BAA2B;AAAA,YAC/C;AAAA,YAEA,0BAA0B,SAAW,MAAgC;AACjE,oBAAM,IAAI,MAAM,2BAA2B;AAAA,YAC/C;AAAA,YAEA,mBAAmB,SAAW,MAAgC;AAC1D,oBAAM,IAAI,MAAM,2BAA2B;AAAA,YAC/C;AAAA,YAEA,cAAc,SAAW,MAAgC;AACrD,oBAAM,IAAI,MAAM,2BAA2B;AAAA,YAC/C;AAAA,YAEA,kBAAkB,SAAW,MAAgC;AACzD,oBAAM,IAAI,MAAM,2BAA2B;AAAA,YAC/C;AAAA,YAEA,yBAAyB,SAAW,MAAgC;AAChE,oBAAM,IAAI,MAAM,2BAA2B;AAAA,YAC/C;AAAA,YAEA,eAAe,SAAW,MAAgC;AACtD,oBAAM,IAAI,MAAM,2BAA2B;AAAA,YAC/C;AAAA,YAEA,kBAAkB,SAAW,MAAgC;AACzD,oBAAM,IAAI,MAAM,2BAA2B;AAAA,YAC/C;AAAA,YAEA,SAAS,SAAW,MAAgC;AAChD,oBAAM,IAAI,MAAM,2BAA2B;AAAA,YAC/C;AAAA,YAEA,aAAa,SAAW,MAAgC;AACpD,oBAAM,IAAI,MAAM,2BAA2B;AAAA,YAC/C;AAAA,YAEA,OAAO,SAAW,SAAmC;AACjD,oBAAM,IAAI,MAAM,2BAA2B;AAAA,YAC/C;AAAA,YAEA,cAAc,SAAW,SAAkC;AACvD,oBAAM,IAAI,MAAM,2BAA2B;AAAA,YAC/C;AAAA,UACJ;AAEA,iBAAO;AAAA,QACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QASA,kBAAkB,SAAW,kBAAmC;AAC5D,gBAAM,IAAI,MAAM,2BAA2B;AAAA,QAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QASA,YAAY,WAAoB;AAC5B,gBAAM,IAAI,MAAM,2BAA2B;AAAA,QAC/C;AAAA,MACJ;AASA,MAAE,uBAAM;AAAA,MAER,GAAI;AAAA,IACR,GAAI;AAAA;AAAA","sourcesContent":["/**\n * JHson.js\n * \n * A JavaScript library for converting between HTML and JSON, with binding, templating, attributes, and CSS support.\n * \n * @file        enum.js\n * @version     v2.0.0\n * @author      Bunoon\n * @license     MIT License\n * @copyright   Bunoon 2024\n */\n\n\nexport const enum Char {\n    empty = \"\",\n    space = \" \",\n    newLine = \"\\n\",\n    variableStart = \"{{\",\n    variableEnd = \"}}\",\n    variableDefault = \"|\",\n    dash = \"-\",\n}\n\nexport const enum Value {\n    notFound = -1,\n}\n\nexport const enum JsonValue {\n    text = \"#text\",\n    cssStyle = \"$\",\n    attribute = \"@\",\n    children = \"&children\",\n}","/**\n * JHson.js\n * \n * A JavaScript library for converting between HTML and JSON, with binding, templating, attributes, and CSS support.\n * \n * @file        is.js\n * @version     v2.0.0\n * @author      Bunoon\n * @license     MIT License\n * @copyright   Bunoon 2024\n */\n\n\nimport { Char } from \"./enum\";\n\n\nexport namespace Is {\n    export function defined( value: any ) : boolean {\n        return value !== null && value !== undefined && value.toString() !== Char.empty;\n    }\n\n    export function definedObject( object: any ) : boolean {\n        return defined( object ) && typeof object === \"object\";\n    }\n\n    export function definedBoolean( object: any ) : boolean {\n        return defined( object ) && typeof object === \"boolean\";\n    }\n\n    export function definedString( object: any ) : boolean {\n        return defined( object ) && typeof object === \"string\";\n    }\n\n    export function definedFunction( object: any ) : boolean {\n        return defined( object ) && typeof object === \"function\";\n    }\n\n    export function definedNumber( object: any ) : boolean {\n        return defined( object ) && typeof object === \"number\";\n    }\n\n    export function definedArray( object: any ) : boolean {\n        return definedObject( object ) && object instanceof Array;\n    }\n}","/**\n * JHson.js\n * \n * A JavaScript library for converting between HTML and JSON, with binding, templating, attributes, and CSS support.\n * \n * @file        jhson.ts\n * @version     v2.0.0\n * @author      Bunoon\n * @license     MIT License\n * @copyright   Bunoon 2024\n */\n\n\nimport { PublicApi, PublicApiHtml, PublicApiJson } from \"./ts/api\";\nimport { Constants } from \"./ts/constant\"\nimport { Is } from \"./ts/is\";\nimport { type Configuration } from \"./ts/type\";\n\n\ntype StringToJson = {\n    parsed: boolean;\n    object: any;\n};\n\n\n( () => {\n    // Variables: Configuration\n    let _configuration: Configuration = {} as Configuration;\n    \n    \n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Triggering Custom Events\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function fireCustomTriggerEvent( triggerFunction: Function, ...args : any[] ) : void {\n        if ( Is.definedFunction( triggerFunction ) ) {\n            triggerFunction.apply( null, [].slice.call( args, 0 ) );\n        }\n    }\n\n\n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Default Parameter/Option Handling\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    function getObjectFromString( objectString: any ) : StringToJson {\n        const result: StringToJson = {\n            parsed: true,\n            object: null\n        } as StringToJson;\n\n        try {\n            if ( Is.definedString( objectString ) ) {\n                result.object = JSON.parse( objectString );\n            }\n\n        } catch ( e1: any ) {\n            try {\n                result.object = eval( `(${objectString})` );\n\n                if ( Is.definedFunction( result.object ) ) {\n                    result.object = result.object();\n                }\n                \n            } catch ( e2: any ) {\n                if ( !_configuration.safeMode ) {\n                    console.error( _configuration.text!.objectErrorText!.replace( \"{{error_1}}\",  e1.message ).replace( \"{{error_2}}\",  e2.message ) );\n                    result.parsed = false;\n                }\n                \n                result.object = null;\n            }\n        }\n\n        return result;\n    }\n\n\n\t/*\n\t * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t * Public API Functions:\n\t * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t */\n\n    const _public: PublicApi = {\n        /*\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         * Public API Functions:  JSON\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         */\n\n        json: function () : PublicApiJson {\n            const scope: PublicApiJson = {\n                includeAttributes: function ( flag: boolean ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                includeCssProperties: function ( flag: boolean ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                includeText: function ( flag: boolean ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                includeChildren: function ( flag: boolean ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                friendlyFormat: function ( flag: boolean ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                indentSpaces: function ( spaces: number ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                ignoreNodeTypes: function ( types: string[] | string ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                ignoreCssProperties: function ( cssProperties: string[] | string ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                ignoreAttributes: function ( attributes: string[] | string ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                generateUniqueMissingIds: function ( flag: boolean ) : PublicApiJson {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                get: function ( element: HTMLElement ) : string {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                getVariables: function ( json: string ) : string[] {\n                    throw new Error(\"Function not implemented.\");\n                }\n            };\n\n            return scope;\n        },\n\n\n        /*\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         * Public API Functions:  HTML\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         */\n\n        html: function () : PublicApiHtml {\n            const scope: PublicApiHtml = {\n                json: function ( json: string ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                templateData: function ( templateData: Record<string, string> ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                removeOriginalAttributes: function ( flag: boolean ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                clearOriginalHTML: function ( flag: boolean ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                addCssToHead: function ( flag: boolean ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                clearCssFromHead: function ( flag: boolean ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                logTemplateDataWarnings: function ( flag: boolean ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                addAttributes: function ( flag: boolean ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                addCssProperties: function ( flag: boolean ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                addText: function ( flag: boolean ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                addChildren: function ( flag: boolean ) : PublicApiHtml {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                write: function ( element: HTMLElement ) : PublicApi {\n                    throw new Error(\"Function not implemented.\");\n                },\n\n                getVariables: function ( element: HTMLElement ) : string[] {\n                    throw new Error(\"Function not implemented.\");\n                }\n            };\n\n            return scope;\n        },\n\n\n        /*\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         * Public API Functions:  Configuration\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         */\n\n        setConfiguration: function ( newConfiguration: any ): PublicApi {\n            throw new Error(\"Function not implemented.\");\n        },\n\n\n        /*\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         * Public API Functions:  Additional Data\n         * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n         */\n\n        getVersion: function (): string {\n            throw new Error(\"Function not implemented.\");\n        }\n    };\n\n    \n    /*\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     * Initialize JHson.js\n     * ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     */\n\n    ( () => {\n    \n    } )();\n} )();"]}